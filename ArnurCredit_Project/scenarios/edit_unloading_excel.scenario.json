{"IybvklVzLA":{"x":240,"y":300,"type":"start","connections":{"inputs":{"actionPort":[{"nodeId":"3QnRw8YPPX","portName":"actionPort"}]},"outputs":{}},"inputData":{"actionPort":{}},"expanded":true,"root":true,"actions":{"data":{}},"id":"IybvklVzLA"},"5eOqfMA7CL":{"id":"5eOqfMA7CL","x":720,"y":300,"type":"import_lib","connections":{"inputs":{"nextAction":[{"nodeId":"Sz0EIV7VJv","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"3QnRw8YPPX","portName":"nextAction"}]}},"inputData":{"lib":{"text":"pandas"},"path":{"path":""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"Sz0EIV7VJv":{"id":"Sz0EIV7VJv","x":1020,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"ej5fDKwpRA","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"5eOqfMA7CL","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport pandas as pd\r\nfrom math import isnan\r\nfrom datetime import datetime, timedelta\r\n\r\ncolumns_to_delete = [\"Unnamed: 0\", \"№ по гр.\", \"Филиал\", \"Источник финансирования\", \"Баланс по сборам\", \"Баланс по госпошлине\", \"Баланс предоплаты по ОС\", \"Баланс предоплаты по %\", \"Баланс по дисконту\", \"Баланс по регулярному резерву по ОС\", \"Баланс по регулярному резерву по процентам\", \"Баланс по резерву МСФО\", \"Резерв МСФО по процентам\", \"Исполнительная надпись\", \"Тип займа\", \"Статус контракта\", \"Группа\", \"Групповое соглашение\", \"Остановка начисления процентов\", \"Дата остановки начисления процентов\", \"Остановка начисления штрафовв\", \"Дата остановки начисления  штрафов\", \"Вид деятельности\", \"Подвид деятельности\", \"Подцель микрокредита\", \"Тип залога\", \"Рыночная стоимость\", \"Залоговая стоимость\", \"Ступень займа\", \"ИИН\", \"Рекомендации по скорингу (КДН)\", \"Дата последней оплаты процентов\", \"Статус Судебник\", \"Ставка резерва по контракту на % и штрафы\", \"ID контракта\", \"Специалист по займам\", \"Дата рождения\", \"Просрочка ОС\", \"Просрочка %\", \"ИП\", \"Группа кредитных продуктов\", \"Пол клиента\", \"Факт.дни просрочки ОС, %, штрафы, отсроч %\", \"Дата создания Линии кредитов\", \"Номер кошелька\", \"Подразделение Линии кредитов\", \"Дата доступности Линии кредитов\", \"Номер линии кредитов\", \"ID линии кредитов\", \"Текущий лимит\", \"Магазин Линии кредитов\", \"GUID клиента\", \"Подпись кредитной линии\", \"Сумма Лимита Линии кредитов\", \"ID кошелька\", \"Баланс ОС, %, штрафы, отсроч %\", \"Ставка резерва по контракту на ОС\", \"Количество дней просрочки по статусу\", \"Пользовательский статус\"]\r\n\r\nsegment_file_path = f\"{{{data_folder_path}}}\\\\Constants\\\\Сегмент.xlsx\"\r\n# file_path = 'C:\\\\Users\\\\А-Бизнес\\\\Desktop\\\\Arnur_Credit\\\\ActiveLoans_2024-01-13-13-56-38.xlsx'\r\n\r\nfile_path = {{path_to_unload_excel}}\r\n\r\ndef get_last_day_of_previous_month():\r\n    today = datetime.today()\r\n\r\n    first_day_of_current_month = today.replace(day=1)\r\n    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)\r\n\r\n    return last_day_of_previous_month.date().strftime('%d.%m.%Y')\r\n\r\ndef get_last_day_of_before_previous_month():\r\n    today = datetime.today()\r\n\r\n    first_day_of_current_month = today.replace(day=1)\r\n\r\n    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)\r\n\r\n    first_day_of_previous_month = (last_day_of_previous_month.replace(day=1)).replace(day=1)\r\n\r\n    last_day_of_before_previous_month = first_day_of_previous_month - timedelta(days=1)\r\n\r\n    return last_day_of_before_previous_month.date().strftime('%d.%m.%Y')\r\n\r\n\r\n\r\ndef add_new_column(df, column_before_insert, column_name, value):\r\n    df.insert(loc=column_before_insert + 1, column=column_name, value=value)\r\n\r\ndef insert_column_after_and_remove(df, existing_column_name, insert_after_column_name):\r\n    if existing_column_name not in df.columns:\r\n        return\r\n\r\n    if insert_after_column_name not in df.columns:\r\n        return\r\n\r\n    insert_after_index = df.columns.get_loc(insert_after_column_name)\r\n\r\n    new_column_values = df[existing_column_name].copy()\r\n\r\n    df.drop(columns=[existing_column_name], errors='ignore', inplace=True)\r\n    \r\n    df.insert(loc=insert_after_index + 1, column=existing_column_name, value=new_column_values)\r\n\r\n    return df\r\n\r\n# Удаляем все колонки, где есть Списанные в колонке Регион\r\ndef remove_column_written_off(df):\r\n    df['Регион'] = df['Регион'].astype(str)\r\n    df = df[~df['Регион'].str.contains('Списанные', case=False)]\r\n\r\n    return df\r\n\r\ndef update_remainder_values(df):\r\n    if 'Клиент' not in df.columns:\r\n        return\r\n\r\n    if 'Остаток суммы МКЛ' not in df.columns:\r\n        return \r\n\r\n    duplicate_clients = df.duplicated(subset=['Клиент'], keep='first')\r\n\r\n    df.loc[duplicate_clients, 'Остаток суммы МКЛ'] = 0\r\n\r\n    return df\r\n\r\ndef remove_column(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\r\n    try:\r\n        if column_name not in df.columns:\r\n            print(\"Error\")\r\n            return df\r\n        df = df.drop(columns=[column_name])\r\n    except:\r\n        return df\r\n    \r\n    return df\r\n\r\ndef create_without_r(df):\r\n    contract_column_index = df.columns.get_loc('Контракт')\r\n    add_new_column(df, contract_column_index, 'Без Р', df['Контракт'].values)\r\n    df['Без Р'] = df['Без Р'].str.rstrip('R')\r\n\r\n    return df\r\n\r\n# Удаляем букву R вначале колонки контракт\r\ndef delete_r_in_contract_column(df):\r\n    df['Контракт'] = df['Контракт'].fillna('Неизвестно')\r\n    mask = df['Контракт'].str.startswith('R')\r\n    df.loc[mask, 'Контракт'] = df.loc[mask, 'Контракт'].str.lstrip('R')\r\n\r\n    return df\r\n\r\ndef get_list_without_GESF(df):\r\n    without_GESF_list = []\r\n    mask = df['Ставка ГЭСВ'].isna()\r\n    for i in df[mask]['Контракт']:\r\n        if not i == \"Неизвестно\":\r\n            without_GESF_list.append(i)\r\n\r\n    return without_GESF_list\r\n\r\ndef insert_GESF_value(df, without_GESF_list, replacement_values):\r\n    if len(without_GESF_list) != len(replacement_values):\r\n        print(\"Размеры не совпадают\")\r\n        return df\r\n\r\n    indices_to_replace = df[df['Контракт'].isin(without_GESF_list)].index\r\n    df.loc[indices_to_replace, 'Ставка ГЭСВ'] = replacement_values\r\n    \r\n    return df\r\n# Если есть слово отсрочка в колоне кредитный продукт, то вконце контракта убираем Р \r\ndef delete_r_with_deferment(df):\r\n    def remove_r_from_contract(row):\r\n        contract_value = row['Контракт']\r\n        credit_product_value = row['Кредитный продукт']\r\n        \r\n        if pd.notnull(credit_product_value):\r\n            credit_product_lower = str(credit_product_value).lower()\r\n            if ('отсрочка' in credit_product_lower) or ('сусн' in credit_product_lower):\r\n                return str(contract_value).rstrip('R')\r\n\r\n        return contract_value\r\n    \r\n    df['Контракт'] = df.apply(remove_r_from_contract, axis=1)\r\n    return df\r\n\r\ndef create_balance_column(df):\r\n    df['Баланс'] = df['Баланс по ОД'] + df['Баланс по %'] + df['Баланс по штрафам']\r\n\r\n    return df\r\n\r\ndef create_segment_column(df, segment_df):\r\n    segment_mapping = dict(zip(segment_df['Кредитный продукт'], segment_df['Сегмент']))\r\n    df['Сегмент'] = df['Кредитный продукт'].map(segment_mapping)\r\n\r\n    return df\r\n\r\ndef fill_na_with_zero(df, column_name):\r\n    if column_name not in df.columns:\r\n        df[column_name] = 0\r\n    else:\r\n        df[column_name] = df[column_name].fillna(0)\r\n\r\n    return df\r\n\r\ndef create_level_of_delinquency_column(value):\r\n    if value == 0:\r\n        return 0\r\n    elif value < 31:\r\n        return 1\r\n    elif value < 61:\r\n        return 2\r\n    elif value < 90:\r\n        return 3\r\n    else:\r\n        return 4\r\n\r\ndef calculate_restructuring(value):\r\n    if \"RRRR\" in str(value):\r\n        return 4\r\n    elif \"RRR\" in str(value):\r\n        return 3\r\n    elif \"RR\" in str(value):\r\n        return 2\r\n    elif \"R\" in str(value):\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n\r\ndf = pd.read_excel(file_path, skiprows=6)\r\n\r\ndf = remove_column_written_off(df)\r\n\r\ndf = delete_r_with_deferment(df)\r\n\r\ndf = create_without_r(df)\r\n\r\ndf = delete_r_in_contract_column(df)\r\n\r\ndf = insert_column_after_and_remove(df, \"Остаток суммы МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Дата закрытия МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Дата открытия МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Сумма МКЛ\", \"Без Р\")\r\n\r\ndf = insert_column_after_and_remove(df, \"Ставка ГЭСВ\", \"Баланс по штрафам\")\r\ndf = insert_column_after_and_remove(df, \"Цель микрокредита\", \"Ставка ГЭСВ\")\r\ndf = update_remainder_values(df)\r\n\r\n# Удаляем ненужные колонки\r\nfor column in columns_to_delete:\r\n    df = remove_column(df, column)\r\n\r\n{{without_GESF}} = get_list_without_GESF(df)\r\n\r\ndf = create_balance_column(df)\r\ndf = insert_column_after_and_remove(df, \"Баланс\", \"Кредитный продукт\")\r\n\r\nsegment_df = pd.read_excel(segment_file_path)\r\ndf = create_segment_column(df, segment_df)\r\ndf = insert_column_after_and_remove(df, \"Сегмент\", \"Баланс\")\r\n\r\ndf = fill_na_with_zero(df, \"Сумма МКЛ\")\r\ndf = fill_na_with_zero(df, \"Дата открытия МКЛ\")\r\ndf = fill_na_with_zero(df, \"Дата закрытия МКЛ\")\r\ndf = fill_na_with_zero(df, \"Остаток суммы МКЛ\")\r\ndf = fill_na_with_zero(df, \"Количество дней просрочки фактическое\")\r\n\r\ndf['Уровень просрочки'] = df['Количество дней просрочки фактическое'].apply(create_level_of_delinquency_column)\r\n\r\ndf['Реструктуризация'] = df['Контракт'].apply(calculate_restructuring)\r\n\r\ndf = fill_na_with_zero(df, \"Списания\")\r\n\r\nprev_month_date = get_last_day_of_previous_month()\r\n\r\ntry:\r\n    os.mkdir(f\"{{{data_folder_path}}}\\\\{prev_month_date}\")\r\nexcept:\r\n    pass\r\nopen_loans_file_name = f\"Открытые займы {prev_month_date}\"\r\n\r\ndf.to_excel(f\"{{{data_folder_path}}}\\\\{prev_month_date}\\\\{open_loans_file_name}.xlsx\", index=False)\r\n\r\n{{path_to_edit_file}} = f\"{{{data_folder_path}}}\\\\{prev_month_date}\\\\{open_loans_file_name}.xlsx\""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"ej5fDKwpRA":{"id":"ej5fDKwpRA","x":1320,"y":300,"type":"return_value","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"Sz0EIV7VJv","portName":"nextAction"}]}},"inputData":{"returnValue":{"returnValue":"[ {{without_GESF}}, {{path_to_edit_file}} ]"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"3QnRw8YPPX":{"id":"3QnRw8YPPX","x":420,"y":300,"type":"import_lib","connections":{"inputs":{"nextAction":[{"nodeId":"5eOqfMA7CL","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"IybvklVzLA","portName":"actionPort"}]}},"inputData":{"lib":{"text":"datetime"},"path":{"path":""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}}}