{"IybvklVzLA":{"x":500,"y":300,"type":"start","connections":{"inputs":{"actionPort":[{"nodeId":"5eOqfMA7CL","portName":"actionPort"}]},"outputs":{}},"inputData":{"actionPort":{}},"expanded":true,"root":true,"actions":{"data":{}},"id":"IybvklVzLA"},"5eOqfMA7CL":{"id":"5eOqfMA7CL","x":690,"y":300,"type":"import_lib","connections":{"inputs":{"nextAction":[{"nodeId":"Sz0EIV7VJv","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"IybvklVzLA","portName":"actionPort"}]}},"inputData":{"lib":{"text":"pandas"},"path":{"path":""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"Sz0EIV7VJv":{"id":"Sz0EIV7VJv","x":990,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"ej5fDKwpRA","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"5eOqfMA7CL","portName":"nextAction"}]}},"inputData":{"script":{"text":"import pandas as pd\r\nfrom math import isnan\r\n# Нет колонки \"Баланс\", \"уровень просрочки\", \"реструктуризация\"\r\n\r\ncolumns_to_delete = [\"Unnamed: 0\", \"№ по гр.\", \"Филиал\", \"Источник финансирования\", \"Баланс по сборам\", \"Баланс по госпошлине\", \"Баланс предоплаты по ОС\", \"Баланс предоплаты по %\", \"Баланс по дисконту\", \"Баланс по регулярному резерву по ОС\", \"Баланс по регулярному резерву по процентам\", \"Баланс по резерву МСФО\", \"Резерв МСФО по процентам\", \"Исполнительная надпись\", \"Тип займа\", \"Статус контракта\", \"Группа\", \"Групповое соглашение\", \"Остановка начисления процентов\", \"Дата остановки начисления процентов\", \"Остановка начисления штрафовв\", \"Дата остановки начисления  штрафов\", \"Вид деятельности\", \"Подвид деятельности\", \"Подцель микрокредита\", \"Тип залога\", \"Рыночная стоимость\", \"Залоговая стоимость\", \"Ступень займа\", \"ИИН\", \"Рекомендации по скорингу (КДН)\", \"Дата последней оплаты процентов\", \"Статус Судебник\", \"Ставка резерва по контракту на % и штрафы\", \"ID контракта\", \"Специалист по займам\", \"Дата рождения\", \"Просрочка ОС\", \"Просрочка %\", \"ИП\", \"Группа кредитных продуктов\", \"Пол клиента\", \"Факт.дни просрочки ОС, %, штрафы, отсроч %\", \"Дата создания Линии кредитов\", \"Номер кошелька\", \"Подразделение Линии кредитов\", \"Дата доступности Линии кредитов\", \"Номер линии кредитов\", \"ID линии кредитов\", \"Текущий лимит\", \"Магазин Линии кредитов\", \"GUID клиента\", \"Подпись кредитной линии\", \"Сумма Лимита Линии кредитов\", \"ID кошелька\", \"Баланс ОС, %, штрафы, отсроч %\", \"Ставка резерва по контракту на ОС\", \"Количество дней просрочки по статусу\"]\r\nfile_path = {{path_to_unload_excel}}\r\n\r\ndef add_new_column(df, column_before_insert, column_name, value):\r\n    df.insert(loc=column_before_insert + 1, column=column_name, value=value)\r\n\r\ndef insert_column_after_and_remove(df, existing_column_name, insert_after_column_name):\r\n    if existing_column_name not in df.columns:\r\n        return\r\n\r\n    if insert_after_column_name not in df.columns:\r\n        return\r\n\r\n    insert_after_index = df.columns.get_loc(insert_after_column_name)\r\n\r\n    new_column_values = df[existing_column_name].copy()\r\n\r\n    df.drop(columns=[existing_column_name], errors='ignore', inplace=True)\r\n    \r\n    df.insert(loc=insert_after_index + 1, column=existing_column_name, value=new_column_values)\r\n\r\n    return df\r\n\r\n# Удаляем все колонки, где есть Списанные в колонке Регион\r\ndef remove_column_written_off(df):\r\n    df['Регион'] = df['Регион'].astype(str)\r\n    df = df[~df['Регион'].str.contains('Списанные', case=False)]\r\n\r\n    return df\r\n\r\ndef update_remainder_values(df):\r\n    if 'Клиент' not in df.columns:\r\n        return\r\n\r\n    if 'Остаток суммы МКЛ' not in df.columns:\r\n        return \r\n\r\n    duplicate_clients = df.duplicated(subset=['Клиент'], keep='first')\r\n\r\n    df.loc[duplicate_clients, 'Остаток суммы МКЛ'] = 0\r\n\r\n    return df\r\n\r\ndef remove_column(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\r\n    if column_name not in df.columns:\r\n        print(\"Error\")\r\n        return\r\n    \r\n    df = df.drop(columns=[column_name])\r\n    \r\n    return df\r\n\r\ndef create_without_r(df):\r\n    contract_column_index = df.columns.get_loc('Контракт')\r\n    add_new_column(df, contract_column_index, 'Без Р', df['Контракт'].values)\r\n    df['Без Р'] = df['Без Р'].str.rstrip('R')\r\n\r\n    return df\r\n\r\n# Удаляем букву R вначале колонки контракт\r\ndef delete_r_in_contract_column(df):\r\n    df['Контракт'] = df['Контракт'].fillna('Неизвестно')\r\n    mask = df['Контракт'].str.startswith('R')\r\n    df.loc[mask, 'Контракт'] = df.loc[mask, 'Контракт'].str.lstrip('R')\r\n\r\n    return df\r\n\r\ndef fill_empty_cells_in_column(df, column):\r\n    for i in df[column]:\r\n        if isnan(i):\r\n            df[column].fillna(0, inplace=True)\r\n            print(df['Контракт'])\r\n\r\ndef get_list_without_GESF(df):\r\n    without_GESF_list = []\r\n    mask = df['Ставка ГЭСВ'].isna()\r\n    for i in df[mask]['Контракт']:\r\n        if not i == \"Неизвестно\":\r\n            without_GESF_list.append(i)\r\n\r\n    return without_GESF_list\r\n\r\ndef insert_GESF_value(df, without_GESF_list, replacement_values):\r\n    if len(without_GESF_list) != len(replacement_values):\r\n        print(\"Размеры не совпадают\")\r\n        return df\r\n\r\n    indices_to_replace = df[df['Контракт'].isin(without_GESF_list)].index\r\n    df.loc[indices_to_replace, 'Ставка ГЭСВ'] = replacement_values\r\n    \r\n    return df\r\n\r\n# Если есть слово отсрочка в колоне кредитный продукт, то вконце контракта убираем Р \r\ndef delete_r_with_deferment(df):\r\n    def remove_r_from_contract(row):\r\n        contract_value = row['Контракт']\r\n        credit_product_value = row['Кредитный продукт']\r\n        \r\n        if pd.notnull(credit_product_value):\r\n            credit_product_lower = str(credit_product_value).lower()\r\n            if 'отсрочка' or 'сусн' in credit_product_lower:\r\n                return str(contract_value).rstrip('R')  # Удаляем все \"R\" в конце строки\r\n\r\n        return contract_value\r\n    \r\n    df['Контракт'] = df.apply(remove_r_from_contract, axis=1)\r\n    return df\r\n\r\n\r\ndf = pd.read_excel(file_path, skiprows=6)\r\n\r\ndf = remove_column_written_off(df)\r\n\r\ndf = delete_r_with_deferment(df)\r\n\r\ndf = create_without_r(df)\r\n\r\ndf = delete_r_in_contract_column(df)\r\n\r\ndf = insert_column_after_and_remove(df, \"Остаток суммы МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Дата закрытия МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Дата открытия МКЛ\", \"Без Р\")\r\ndf = insert_column_after_and_remove(df, \"Сумма МКЛ\", \"Без Р\")\r\n\r\ndf = insert_column_after_and_remove(df, \"Ставка ГЭСВ\", \"Остаток суммы МКЛ\")\r\n\r\ndf = update_remainder_values(df)\r\n\r\n# Удаляем ненужные колонки\r\nfor column in columns_to_delete:\r\n    df = remove_column(df, column)\r\n\r\nwithout_GESF_list = get_list_without_GESF(df)\r\n{{without_GESF}} = without_GESF_list\r\n\r\ninsert_GESF_value(df, without_GESF_list, [111])\r\n\r\ndf.to_excel({{test_excel_path}}, index=False)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"ej5fDKwpRA":{"id":"ej5fDKwpRA","x":1290,"y":300,"type":"return_value","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"Sz0EIV7VJv","portName":"nextAction"}]}},"inputData":{"returnValue":{"returnValue":"{{without_GESF}}"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}}}