{"w6WUcm6TkL":{"x":-30,"y":300,"type":"start","connections":{"inputs":{"actionPort":[{"nodeId":"qDllQSJfDO","portName":"actionPort"}]},"outputs":{}},"inputData":{"actionPort":{}},"expanded":true,"root":true,"actions":{"data":{}},"id":"w6WUcm6TkL"},"Cm6XOm47Mf":{"id":"Cm6XOm47Mf","x":1320,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"Klf5RzjWyq","portName":"actionPort"}]},"outputs":{"actionPort":[]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\ndef filter_and_append_sheet(source_file, destination_file, segment, sheet_name):\r\n    df = pd.read_excel(source_file)\r\n    filtered_df = df[(df['Сегмент'] == segment) & (df['Количество дней просрочки фактическое'] > 90)]\r\n    column_data = filtered_df[['Без Р']]\r\n\r\n    with pd.ExcelWriter(destination_file, engine='openpyxl', mode='a') as writer:\r\n        column_data.to_excel(writer, sheet_name=sheet_name, index=False)\r\n    # Прошлый месяц\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n# Позапрошлый месяц\r\nlast_day_before_prev_month = {{last_day_of_before_prev_month}}\r\n\r\nsource_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_before_prev_month}\\\\LGD\"\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\nsource_excel_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\Открытые займы {last_day_previous_month}.xlsx\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Агро.xlsx\"\r\n\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime(last_day_before_prev_month, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nfilter_and_append_sheet(source_excel_path, destination_excel_path_agro, \"Агро\", sheet_name)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Вставляем контракты в lgd с выгрузки\n"},"JNqpsQaHRq":{"id":"JNqpsQaHRq","x":720,"y":300,"type":"import_lib","connections":{"inputs":{"nextAction":[{"nodeId":"C9_6FwvOb8","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"Om2M3OvNDy","portName":"nextAction"}]}},"inputData":{"lib":{"text":"shutil"},"path":{"path":""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"C9_6FwvOb8":{"id":"C9_6FwvOb8","x":1020,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"RzWimMdsD9","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"JNqpsQaHRq","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\ndef copy_files(source_folder, destination_folder):\r\n    if not os.path.exists(source_folder):\r\n        print(f\"Исходная папка '{source_folder}' не существует.\")\r\n        return\r\n\r\n    if not os.path.exists(destination_folder):\r\n        os.mkdir(destination_folder)\r\n    \r\n\r\n    files = os.listdir(source_folder)\r\n\r\n    for file in files:\r\n        source_path = os.path.join(source_folder, file)\r\n        destination_path = os.path.join(destination_folder, file)\r\n        shutil.copy2(source_path, destination_path)\r\n        print(f\"Файл '{file}' скопирован в '{destination_folder}'.\")\r\n\r\n\r\nsource_folder_path = f\"{{{data_folder_path}}}\\\\{{{last_day_of_before_prev_month}}}\\\\{{{last_day_of_before_prev_month}}}\\\\LGD\"\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{{{last_day_of_prev_month}}}\\\\LGD\"\r\n\r\ncopy_files(source_folder_path, destination_folder_path)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Копируем lgd с прош месяца"},"Klf5RzjWyq":{"id":"Klf5RzjWyq","x":1620,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"FH07xiaogG","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"Cm6XOm47Mf","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Агро.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef insert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path):\r\n    try:\r\n        # Чтение данных из файла \"Агро.xlsx\", лист \"202312\"\r\n        df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n\r\n        # Чтение данных из файла \"Уникальные.xlsx\", лист \"агро\" без заголовков\r\n        df_uniques = pd.read_excel(unique_sheet_path, sheet_name='агро', header=None)\r\n        df_uniques.columns = ['Уникальные']  # Назначение названия столбца\r\n        df_uniques.dropna(inplace=True)  # Удаление пустых строк\r\n\r\n        if len(df_agro) < len(df_uniques):\r\n            extra_rows = len(df_uniques) - len(df_agro)\r\n            temp_df = pd.DataFrame(index=range(extra_rows), columns=df_agro.columns)\r\n            df_agro = pd.concat([df_agro, temp_df], ignore_index=True)\r\n\r\n        df_agro['Уникальные'] = pd.Series(df_uniques['Уникальные'].values)\r\n\r\n        # Сохранение обновленных данных в файл \"Агро.xlsx\", лист \"202312\"\r\n        with pd.ExcelWriter(destination_excel_path_agro, engine='openpyxl') as writer:\r\n            writer.book = load_workbook(destination_excel_path_agro)\r\n            writer.sheets = {ws.title: ws for ws in writer.book.worksheets}\r\n            df_agro.to_excel(writer, sheet_name=sheet_name, index=False)\r\n\r\n    except Exception as e:\r\n        print(f\"Произошла ошибка при обработке данных: {e}\")\r\n\r\ninsert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем контракты из файла Уникальные"},"FH07xiaogG":{"id":"FH07xiaogG","x":1920,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"Doqg6tX1l4","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"Klf5RzjWyq","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Агро.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef get_unique_contacts_list() -> list:\r\n    df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n    \r\n    unique_contacts_list = []\r\n    with_out_r_list = df_agro['Без Р'].dropna().astype(str).tolist()  \r\n    contacts_list = df_agro[\"Уникальные\"].dropna().astype(str).tolist()\r\n\r\n    with_out_r_list.sort()\r\n    contacts_list.sort()\r\n\r\n    for i, value in enumerate(with_out_r_list):\r\n        try:\r\n            if value not in contacts_list:\r\n                unique_contacts_list.append(value)\r\n        except IndexError:\r\n            pass\r\n   \r\n    return unique_contacts_list\r\n\r\nunique_contacts_list = get_unique_contacts_list()\r\n{{unique_contacts_list}} = unique_contacts_list"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем массив уникальных контрактов"},"Om2M3OvNDy":{"id":"Om2M3OvNDy","x":420,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"JNqpsQaHRq","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"qDllQSJfDO","portName":"nextAction"}]}},"inputData":{"script":{"text":"from datetime import datetime, timedelta\r\n\r\ndef get_last_day_of_previous_month():\r\n    today = datetime.today()\r\n\r\n    first_day_of_current_month = today.replace(day=1)\r\n    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)\r\n\r\n    return last_day_of_previous_month.date().strftime('%d.%m.%Y')\r\n\r\ndef get_last_day_of_before_previous_month():\r\n    today = datetime.today()\r\n\r\n    first_day_of_current_month = today.replace(day=1)\r\n\r\n    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)\r\n\r\n    first_day_of_previous_month = (last_day_of_previous_month.replace(day=1)).replace(day=1)\r\n\r\n    last_day_of_before_previous_month = first_day_of_previous_month - timedelta(days=1)\r\n\r\n    return last_day_of_before_previous_month.date().strftime('%d.%m.%Y')\r\n\r\n{{last_day_of_prev_month}} = get_last_day_of_previous_month()\r\n{{last_day_of_before_prev_month}} = get_last_day_of_before_previous_month()"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем даты\n"},"qDllQSJfDO":{"id":"qDllQSJfDO","x":150,"y":300,"type":"import_lib","connections":{"inputs":{"nextAction":[{"nodeId":"Om2M3OvNDy","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"w6WUcm6TkL","portName":"actionPort"}]}},"inputData":{"lib":{"text":"os"},"path":{"path":""},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"Doqg6tX1l4":{"id":"Doqg6tX1l4","x":2220,"y":300,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"5kSdaNUrTT","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"FH07xiaogG","portName":"nextAction"}]}},"inputData":{"script":{"text":"from datetime import datetime\r\nimport openpyxl\r\nfrom openpyxl.styles import PatternFill\r\n\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef get_active_sheet(workbook):\r\n    \"\"\" Возвращает активный лист из рабочей книги \"\"\"\r\n    return workbook.active\r\n\r\ndef read_gesv_and_balance_values(sheet, contracts):\r\n    \"\"\" Читает значения ГЭСВ и баланса для контрактов позапрошлого месяца \"\"\"\r\n    gesv_values = {}\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    gesv_index = header_row.index(\"Ставка ГЭСВ\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            gesv = row[gesv_index - 1]\r\n            balance = row[balance_index - 1]\r\n            gesv_values[contract] = gesv\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef read_balance_values_from_prev(sheet, contracts):\r\n    \"\"\" Читает значения баланса для контрактов с прош месяца\"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, gesv_values=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n    \r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            balance = row[balance_index - 1]\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef create_and_format_sheet(workbook, sheet_name):\r\n    \"\"\" Создает и форматирует новый лист \"\"\"\r\n    if sheet_name in workbook.sheetnames:\r\n        sheet = workbook[sheet_name]\r\n        sheet.delete_rows(2, sheet.max_row)\r\n        sheet.delete_cols(2, sheet.max_column)\r\n    else:\r\n        sheet = workbook.create_sheet(sheet_name)\r\n    sheet['A1'] = '№'\r\n    sheet['B1'] = 'Contracts'\r\n    sheet['C1'] = 'Rate'\r\n    sheet['D1'] = sheet_name_before_prev\r\n    sheet['E1'] = sheet_name_prev\r\n    return sheet\r\n\r\ndef add_data_to_sheet(sheet, contracts, gesv_values, balance_values_before_prev, balance_values_prev):\r\n    \"\"\" Добавляет данные контрактов, ГЭСВ и баланса за два месяца в лист \"\"\"\r\n    row_number = 1\r\n    for contract in contracts:\r\n        gesv = gesv_values.get(contract, None)\r\n        balance_before_prev = balance_values_before_prev.get(contract, None)\r\n        balance_prev = balance_values_prev.get(contract, None)\r\n        row_number += 1\r\n        sheet.append([row_number - 1, contract, gesv, balance_before_prev, balance_prev])\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef add_summary_to_sheet(sheet, start_row, end_row):\r\n    \"\"\" Добавляет итоговые строки с формулами для общих сумм, разницы и среднего значения ГЭСВ \"\"\"\r\n    # Вставляем пустые строки\r\n    sheet.insert_rows(end_row + 1)\r\n    sheet.insert_rows(end_row + 2)\r\n    \r\n    # Добавляем формулы для общих сумм, сдвигая на одну ячейку вправо\r\n    total_prev_cell = sheet.cell(row=end_row + 3, column=4)\r\n    total_prev_cell.value = f\"=SUM(D{start_row}:D{end_row})\"\r\n    total_curr_cell = sheet.cell(row=end_row + 3, column=5)\r\n    total_curr_cell.value = f\"=SUM(E{start_row}:E{end_row})\"\r\n    \r\n    # Задаем красный цвет заливки для ячейки с формулой суммирования предыдущего месяца\r\n    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')\r\n    total_prev_cell.fill = red_fill\r\n    \r\n    # Добавляем формулу для разницы между суммами\r\n    sheet.cell(row=end_row + 4, column=2).value = \"Recovery flows\"\r\n    sheet.cell(row=end_row + 4, column=5).value = f\"=IF(E{end_row + 3}>D{end_row + 3},E{end_row + 3}-D{end_row + 3},\\\"-\\\")\"\r\n    \r\n    # Добавляем формулу для среднего ГЭСВ\r\n    sheet.cell(row=end_row + 5, column=2).value = \"Rate\"\r\n    sheet.cell(row=end_row + 5, column=3).value = f\"=SUMPRODUCT(D{start_row}:D{end_row},C{start_row}:C{end_row})/D{end_row + 3}\"\r\n\r\n\r\n\r\nwb_open_loans_before_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_before_prev_month}}}/Открытые займы {{{last_day_of_before_prev_month}}}.xlsx\")\r\nwb_open_loans_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/Открытые займы {{{last_day_of_prev_month}}}.xlsx\")\r\nsheet_open_loans_before_prev_month = get_active_sheet(wb_open_loans_before_prev_month)\r\nsheet_open_loans_prev_month = get_active_sheet(wb_open_loans_prev_month)\r\n\r\ngesv_values, balance_values_before_prev = read_gesv_and_balance_values(sheet_open_loans_before_prev_month, {{unique_contacts_list}})\r\n_, balance_values_prev = read_gesv_and_balance_values(sheet_open_loans_prev_month, {{unique_contacts_list}})\r\n\r\nwb_agro = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Агро.xlsx\")\r\nsheet_agro = create_and_format_sheet(wb_agro, sheet_name_before_prev)\r\nadd_data_to_sheet(sheet_agro, {{unique_contacts_list}}, gesv_values, balance_values_before_prev, balance_values_prev)\r\n\r\nstart_row = 2  # Стартовая строка для данных\r\nend_row = sheet_agro.max_row  # Последняя строка с данными\r\nadd_summary_to_sheet(sheet_agro, start_row, end_row)\r\n\r\nsave_workbook(wb_agro, f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Агро.xlsx\")\r\n"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Записываем в ексель уникальные контракты и их гэсв"},"5kSdaNUrTT":{"id":"5kSdaNUrTT","x":2520,"y":300,"type":"invoce_code_script","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"Doqg6tX1l4","portName":"nextAction"}]}},"inputData":{"script":{"text":"import openpyxl\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime, timedelta\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nmonths_dict = {\r\n    \"January\": \"Январь\", \"February\": \"Февраль\", \"March\": \"Март\",\r\n    \"April\": \"Апрель\", \"May\": \"Май\", \"June\": \"Июнь\",\r\n    \"July\": \"Июль\", \"August\": \"Август\", \"September\": \"Сентябрь\",\r\n    \"October\": \"Октябрь\", \"November\": \"Ноябрь\", \"December\": \"Декабрь\"\r\n}\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef read_balance_values(sheet):\r\n    \"\"\" Читает значения баланса из листа \"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contract_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contract_index - 1]\r\n        balance = row[balance_index - 1]\r\n        balance_values[contract] = balance\r\n\r\n    return balance_values\r\n\r\n# столбцы с месяцами в LGD\r\ndef shift_up_and_set_last_row(workbook, sheet_name='LGD', columns=['B', 'C'], start_row=4, end_row=26):\r\n    sheet = workbook[sheet_name]\r\n\r\n    # Поднятие значений столбцов на одну строку вверх\r\n    for column in columns:\r\n        for row in range(start_row + 1, end_row + 1):\r\n            sheet[f'{column}{row - 1}'].value = sheet[f'{column}{row}'].value\r\n\r\n    # Настройка даты для последней строки в столбце B\r\n    first_day_of_current_month = datetime.now().replace(day=1)\r\n    last_month_date = first_day_of_current_month - timedelta(days=1)\r\n    last_month_str = last_month_date.strftime(\"%B %Y\").capitalize()\r\n    for month in months_dict:\r\n        if last_month_str.startswith(month):\r\n            last_month_str = last_month_str.replace(month, months_dict[month])\r\n            break\r\n    sheet[f'B{end_row}'].value = last_month_str\r\n\r\n    last_sheet_name = sheet_name_before_prev\r\n    last_sheet = workbook[last_sheet_name]\r\n    last_row_in_last_sheet = last_sheet.max_row - 2  # Третья строка с конца\r\n    ref_cell = f\"'{last_sheet_name}'!D{last_row_in_last_sheet}\"\r\n\r\n    sheet[f'C{end_row}'].value = f\"={ref_cell}\"\r\n\r\n# Столбцы справа с гэсв\r\ndef shift_up_and_set_last_value(workbook, sheet_name_before_prev, target_sheet_name='LGD', column='AA', start_row=31, end_row=53):\r\n    target_sheet = workbook[target_sheet_name]\r\n    source_sheet = workbook[sheet_name_before_prev]\r\n\r\n    for row in range(start_row + 1, end_row + 1):\r\n        target_sheet[f'{column}{row - 1}'].value = target_sheet[f'{column}{row}'].value\r\n\r\n    last_row_in_source_sheet = source_sheet.max_row  # Последняя строка в исходном листе\r\n    ref_cell = f\"'{sheet_name_before_prev}'!C{last_row_in_source_sheet}\"\r\n    target_sheet[f'{column}{end_row}'].value = f\"={ref_cell}\"\r\n\r\n\r\ndef copy_values_in_columns(workbook, sheet_name='LGD', columns=['B', 'C'], source_start_row=4, source_end_row=26, target_start_rows=[31, 58]):\r\n    sheet = workbook[sheet_name]\r\n\r\n    for target_start_row in target_start_rows:\r\n        for i in range(source_end_row - source_start_row + 1):\r\n            source_row = source_start_row + i\r\n            target_row = target_start_row + i\r\n\r\n            for column in columns:\r\n                source_cell = sheet[f'{column}{source_row}']\r\n                target_cell = sheet[f'{column}{target_row}']\r\n                target_cell.value = source_cell.value\r\n\r\n\r\ndef find_formula_row(sheet):\r\n    \"\"\" Находит строку, в которую нужно вставить формулу \"\"\"\r\n    for row in range(sheet.max_row, 0, -1):\r\n        cell_value = sheet.cell(row=row, column=1).value\r\n        if cell_value is not None:\r\n            return row + 3\r\n    return 3\r\n\r\ndef update_sheets(workbook, balance_values, sheet_name_before_prev):\r\n    \"\"\" Обновляет листы в рабочей книге, добавляя новую колонку с балансом и формулы суммы и разности \"\"\"\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != 'LGD' and sheet_name != sheet_name_before_prev:\r\n            sheet = workbook[sheet_name]\r\n            writeoff_column_index = None\r\n            header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n            if \"Списание\" in header_row:\r\n                writeoff_column_index = header_row.index(\"Списание\") + 1\r\n\r\n            # Определение местоположения новой колонки\r\n            new_column_index = writeoff_column_index or sheet.max_column + 1\r\n\r\n            # Добавляем название новой колонки и данные\r\n            if writeoff_column_index:\r\n                sheet.insert_cols(writeoff_column_index)\r\n\r\n            sheet.cell(row=1, column=new_column_index).value = sheet_name_before_prev\r\n            for row in range(2, sheet.max_row + 1):\r\n                contract_cell = sheet.cell(row=row, column=2)\r\n                contract = contract_cell.value\r\n                balance = balance_values.get(contract)\r\n\r\n                # Копируем значение из предыдущего столбца, если есть столбец \"Списание\"\r\n                if writeoff_column_index:\r\n                    prev_column_value = sheet.cell(row=row, column=new_column_index - 1).value\r\n                    sheet.cell(row=row, column=new_column_index).value = prev_column_value\r\n                else:\r\n                    sheet.cell(row=row, column=new_column_index).value = balance\r\n\r\n            # Добавляем формулу суммы\r\n            formula_row = find_formula_row(sheet)\r\n            column_letter = get_column_letter(new_column_index)\r\n            sum_formula = f\"=SUM({column_letter}2:{column_letter}{formula_row - 1})\"\r\n            sheet.cell(row=formula_row, column=new_column_index).value = sum_formula\r\n\r\n            # Добавляем формулу разности\r\n            prev_column_letter = get_column_letter(new_column_index - 1)\r\n            diff_formula = f\"=IF({prev_column_letter}{formula_row}>{column_letter}{formula_row},{prev_column_letter}{formula_row}-{column_letter}{formula_row},\\\"-\\\")\"\r\n            sheet.cell(row=formula_row + 1, column=new_column_index).value = diff_formula\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef delete_sheet_after_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Удаляет лист, следующий за листом 'LGD' \"\"\"\r\n    lgd_index = None\r\n    for i, sheet_name in enumerate(workbook.sheetnames):\r\n        if sheet_name == lgd_sheet_name:\r\n            lgd_index = i\r\n            break\r\n\r\n    if lgd_index is not None and lgd_index < len(workbook.sheetnames) - 1:\r\n        next_sheet_name = workbook.sheetnames[lgd_index + 1]\r\n        del workbook[next_sheet_name]\r\n    else:\r\n        pass\r\n\r\ndef read_recovery_flows(sheet):\r\n    \"\"\" Читает формулы или значения из строки 'Recovery flows' в листе \"\"\"\r\n    recovery_flows = []\r\n    for row in range(sheet.max_row - 1, sheet.max_row + 1):  # Поиск в предпоследней строке\r\n        if sheet.cell(row=row, column=2).value == \"Recovery flows\":\r\n            for col in range(5, sheet.max_column + 1):  # Считывание начиная с колонки E\r\n                cell = sheet.cell(row=row, column=col)\r\n                value_or_formula = cell.value\r\n                if isinstance(value_or_formula, str) and value_or_formula.startswith('='):\r\n                    recovery_flows.append(value_or_formula)  \r\n                else:\r\n                    recovery_flows.append(value_or_formula) \r\n            break\r\n    return recovery_flows\r\n\r\ndef insert_recovery_flows_in_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Вставляет формулы для значений 'Recovery flows' из других листов в лист LGD \"\"\"\r\n    lgd_sheet = workbook[lgd_sheet_name]\r\n    current_row = 4  # Начало вставки в 4 строку\r\n    max_column_source = 27  # Столбец AA \r\n\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != lgd_sheet_name:\r\n            sheet = workbook[sheet_name]\r\n            recovery_flows_row = sheet.max_row - 1  # Предпоследняя строка\r\n            col_start_source = 5  # Столбец E в исходных листах\r\n            col_start_target = 4  # Столбец D в листе LGD\r\n\r\n            for col_source in range(col_start_source, max_column_source + 1):  # Столбцы в исходном листе\r\n                col_target = col_start_target + (col_source - col_start_source)  # Соответствующий столбец в листе LGD\r\n                col_letter = openpyxl.utils.get_column_letter(col_source)\r\n                ref_cell = f\"'{sheet_name}'!{col_letter}{recovery_flows_row}\"\r\n                lgd_sheet.cell(row=current_row, column=col_target).value = f\"={ref_cell}\"\r\n\r\n            current_row += 1  # Переход к следующей строке в LGD\r\n            max_column_source -= 1  # Уменьшаем максимальный столбец для следующего листа\r\n\r\n\r\n# Загрузка данных о займах\r\nloans_workbook = load_workbook(f\"C:\\\\Users\\\\А-Бизнес\\\\Desktop\\\\Arnur_Credit\\\\31.12.2023\\\\Открытые займы 31.12.2023.xlsx\")\r\nloans_sheet = loans_workbook.active\r\nbalance_values = read_balance_values(loans_sheet)\r\n\r\n\r\npath_to_agro_excel = f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/LGD/Агро.xlsx\"\r\n\r\nagro_workbook = load_workbook(path_to_agro_excel)\r\n\r\ndelete_sheet_after_LGD(agro_workbook)\r\n\r\nupdate_sheets(agro_workbook, balance_values, sheet_name_before_prev)\r\n\r\ninsert_recovery_flows_in_LGD(agro_workbook)\r\n\r\nshift_up_and_set_last_row(agro_workbook)\r\n\r\ncopy_values_in_columns(agro_workbook)\r\n\r\nshift_up_and_set_last_value(agro_workbook, sheet_name_before_prev)\r\n\r\nsave_workbook(agro_workbook, path_to_agro_excel)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"ПОМЕНЯТЬ ПУТЬ\nЗаполняем все \nтаблицы "},"RzWimMdsD9":{"id":"RzWimMdsD9","x":1320,"y":450,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"ol4heOz6Rt","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"C9_6FwvOb8","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\ndef filter_and_append_sheet(source_file, destination_file, segment, sheet_name):\r\n    df = pd.read_excel(source_file)\r\n    filtered_df = df[(df['Сегмент'] == segment) & (df['Количество дней просрочки фактическое'] > 90)]\r\n    column_data = filtered_df[['Без Р']]\r\n\r\n    with pd.ExcelWriter(destination_file, engine='openpyxl', mode='a') as writer:\r\n        column_data.to_excel(writer, sheet_name=sheet_name, index=False)\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n# Позапрошлый месяц\r\nlast_day_before_prev_month = {{last_day_of_before_prev_month}}\r\n\r\nsource_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_before_prev_month}\\\\LGD\"\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\nsource_excel_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\Открытые займы {last_day_previous_month}.xlsx\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Предпринимательский.xlsx\"\r\n\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime(last_day_before_prev_month, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nfilter_and_append_sheet(source_excel_path, destination_excel_path_agro, \"Предпринимательский\", sheet_name)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Вставляем контракты в lgd с выгрузки\n"},"ol4heOz6Rt":{"id":"ol4heOz6Rt","x":1620,"y":450,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"Xm9s5-YUZ5","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"RzWimMdsD9","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Предпринимательский.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef insert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path):\r\n    try:\r\n        # Чтение данных из файла \"Предпринимательский.xlsx\", лист \"202311\"\r\n        df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n\r\n        # Чтение данных из файла \"Уникальные.xlsx\", лист \"агро\" без заголовков\r\n        df_uniques = pd.read_excel(unique_sheet_path, sheet_name='предприн', header=None)\r\n        df_uniques.columns = ['Уникальные']  # Назначение названия столбца\r\n        df_uniques.dropna(inplace=True)  # Удаление пустых строк\r\n\r\n        if len(df_agro) < len(df_uniques):\r\n            extra_rows = len(df_uniques) - len(df_agro)\r\n            temp_df = pd.DataFrame(index=range(extra_rows), columns=df_agro.columns)\r\n            df_agro = pd.concat([df_agro, temp_df], ignore_index=True)\r\n\r\n        df_agro['Уникальные'] = pd.Series(df_uniques['Уникальные'].values)\r\n\r\n        # Сохранение обновленных данных в файл \"Агро.xlsx\", лист \"202311\"\r\n        with pd.ExcelWriter(destination_excel_path_agro, engine='openpyxl') as writer:\r\n            writer.book = load_workbook(destination_excel_path_agro)\r\n            writer.sheets = {ws.title: ws for ws in writer.book.worksheets}\r\n            df_agro.to_excel(writer, sheet_name=sheet_name, index=False)\r\n\r\n    except Exception as e:\r\n        print(f\"Произошла ошибка при обработке данных: {e}\")\r\n\r\ninsert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем контракты из файла Уникальные"},"Xm9s5-YUZ5":{"id":"Xm9s5-YUZ5","x":1920,"y":450,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"Tz0GqfDslU","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"ol4heOz6Rt","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Предпринимательский.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef get_unique_contacts_list() -> list:\r\n    df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n    \r\n    unique_contacts_list = []\r\n    with_out_r_list = df_agro['Без Р'].dropna().astype(str).tolist()  \r\n    contacts_list = df_agro[\"Уникальные\"].dropna().astype(str).tolist()\r\n\r\n    with_out_r_list.sort()\r\n    contacts_list.sort()\r\n\r\n    for i, value in enumerate(with_out_r_list):\r\n        try:\r\n            if value not in contacts_list:\r\n                unique_contacts_list.append(value)\r\n        except IndexError:\r\n            pass\r\n   \r\n    return unique_contacts_list\r\n\r\nunique_contacts_list = get_unique_contacts_list()\r\n{{unique_contacts_list}} = unique_contacts_list"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем массив уникальных контрактов"},"Tz0GqfDslU":{"id":"Tz0GqfDslU","x":2220,"y":450,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"PIqO6mYSME","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"Xm9s5-YUZ5","portName":"nextAction"}]}},"inputData":{"script":{"text":"from datetime import datetime\r\nimport openpyxl\r\nfrom openpyxl.styles import PatternFill\r\n\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef get_active_sheet(workbook):\r\n    \"\"\" Возвращает активный лист из рабочей книги \"\"\"\r\n    return workbook.active\r\n\r\ndef read_gesv_and_balance_values(sheet, contracts):\r\n    \"\"\" Читает значения ГЭСВ и баланса для контрактов позапрошлого месяца \"\"\"\r\n    gesv_values = {}\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    gesv_index = header_row.index(\"Ставка ГЭСВ\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            gesv = row[gesv_index - 1]\r\n            balance = row[balance_index - 1]\r\n            gesv_values[contract] = gesv\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef read_balance_values_from_prev(sheet, contracts):\r\n    \"\"\" Читает значения баланса для контрактов с прош месяца\"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, gesv_values=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n    \r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            balance = row[balance_index - 1]\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef create_and_format_sheet(workbook, sheet_name):\r\n    \"\"\" Создает и форматирует новый лист \"\"\"\r\n    if sheet_name in workbook.sheetnames:\r\n        sheet = workbook[sheet_name]\r\n        sheet.delete_rows(2, sheet.max_row)\r\n        sheet.delete_cols(2, sheet.max_column)\r\n    else:\r\n        sheet = workbook.create_sheet(sheet_name)\r\n    sheet['A1'] = '№'\r\n    sheet['B1'] = 'Contracts'\r\n    sheet['C1'] = 'Rate'\r\n    sheet['D1'] = sheet_name_before_prev\r\n    sheet['E1'] = sheet_name_prev\r\n    return sheet\r\n\r\ndef add_data_to_sheet(sheet, contracts, gesv_values, balance_values_before_prev, balance_values_prev):\r\n    \"\"\" Добавляет данные контрактов, ГЭСВ и баланса за два месяца в лист \"\"\"\r\n    row_number = 1\r\n    for contract in contracts:\r\n        gesv = gesv_values.get(contract, None)\r\n        balance_before_prev = balance_values_before_prev.get(contract, None)\r\n        balance_prev = balance_values_prev.get(contract, None)\r\n        row_number += 1\r\n        sheet.append([row_number - 1, contract, gesv, balance_before_prev, balance_prev])\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef add_summary_to_sheet(sheet, start_row, end_row):\r\n    \"\"\" Добавляет итоговые строки с формулами для общих сумм, разницы и среднего значения ГЭСВ \"\"\"\r\n    # Вставляем пустые строки\r\n    sheet.insert_rows(end_row + 1)\r\n    sheet.insert_rows(end_row + 2)\r\n    \r\n    # Добавляем формулы для общих сумм, сдвигая на одну ячейку вправо\r\n    total_prev_cell = sheet.cell(row=end_row + 3, column=4)\r\n    total_prev_cell.value = f\"=SUM(D{start_row}:D{end_row})\"\r\n    total_curr_cell = sheet.cell(row=end_row + 3, column=5)\r\n    total_curr_cell.value = f\"=SUM(E{start_row}:E{end_row})\"\r\n    \r\n    # Задаем красный цвет заливки для ячейки с формулой суммирования предыдущего месяца\r\n    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')\r\n    total_prev_cell.fill = red_fill\r\n    \r\n    # Добавляем формулу для разницы между суммами\r\n    sheet.cell(row=end_row + 4, column=2).value = \"Recovery flows\"\r\n    sheet.cell(row=end_row + 4, column=5).value = f\"=IF(E{end_row + 3}>D{end_row + 3},E{end_row + 3}-D{end_row + 3},\\\"-\\\")\"\r\n    \r\n    # Добавляем формулу для среднего ГЭСВ\r\n    sheet.cell(row=end_row + 5, column=2).value = \"Rate\"\r\n    sheet.cell(row=end_row + 5, column=3).value = f\"=SUMPRODUCT(D{start_row}:D{end_row},C{start_row}:C{end_row})/D{end_row + 3}\"\r\n\r\n\r\n\r\nwb_open_loans_before_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_before_prev_month}}}/Открытые займы {{{last_day_of_before_prev_month}}}.xlsx\")\r\nwb_open_loans_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/Открытые займы {{{last_day_of_prev_month}}}.xlsx\")\r\nsheet_open_loans_before_prev_month = get_active_sheet(wb_open_loans_before_prev_month)\r\nsheet_open_loans_prev_month = get_active_sheet(wb_open_loans_prev_month)\r\n\r\ngesv_values, balance_values_before_prev = read_gesv_and_balance_values(sheet_open_loans_before_prev_month, {{unique_contacts_list}})\r\n_, balance_values_prev = read_gesv_and_balance_values(sheet_open_loans_prev_month, {{unique_contacts_list}})\r\n\r\nwb_agro = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Предпринимательский.xlsx\")\r\nsheet_agro = create_and_format_sheet(wb_agro, sheet_name_before_prev)\r\nadd_data_to_sheet(sheet_agro, {{unique_contacts_list}}, gesv_values, balance_values_before_prev, balance_values_prev)\r\n\r\nstart_row = 2  # Стартовая строка для данных\r\nend_row = sheet_agro.max_row  # Последняя строка с данными\r\nadd_summary_to_sheet(sheet_agro, start_row, end_row)\r\n\r\nsave_workbook(wb_agro, f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Предпринимательский.xlsx\")\r\n"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Записываем в ексель уникальные контракты и их гэсв"},"PIqO6mYSME":{"id":"PIqO6mYSME","x":2520,"y":450,"type":"invoce_code_script","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"Tz0GqfDslU","portName":"nextAction"}]}},"inputData":{"script":{"text":"import openpyxl\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime, timedelta\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nmonths_dict = {\r\n    \"January\": \"Январь\", \"February\": \"Февраль\", \"March\": \"Март\",\r\n    \"April\": \"Апрель\", \"May\": \"Май\", \"June\": \"Июнь\",\r\n    \"July\": \"Июль\", \"August\": \"Август\", \"September\": \"Сентябрь\",\r\n    \"October\": \"Октябрь\", \"November\": \"Ноябрь\", \"December\": \"Декабрь\"\r\n}\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef read_balance_values(sheet):\r\n    \"\"\" Читает значения баланса из листа \"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contract_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contract_index - 1]\r\n        balance = row[balance_index - 1]\r\n        balance_values[contract] = balance\r\n\r\n    return balance_values\r\n\r\n# столбцы с месяцами в LGD\r\ndef shift_up_and_set_last_row(workbook, sheet_name='LGD', columns=['B', 'C'], start_row=4, end_row=26):\r\n    sheet = workbook[sheet_name]\r\n\r\n    # Поднятие значений столбцов на одну строку вверх\r\n    for column in columns:\r\n        for row in range(start_row + 1, end_row + 1):\r\n            sheet[f'{column}{row - 1}'].value = sheet[f'{column}{row}'].value\r\n\r\n    # Настройка даты для последней строки в столбце B\r\n    first_day_of_current_month = datetime.now().replace(day=1)\r\n    last_month_date = first_day_of_current_month - timedelta(days=1)\r\n    last_month_str = last_month_date.strftime(\"%B %Y\").capitalize()\r\n    for month in months_dict:\r\n        if last_month_str.startswith(month):\r\n            last_month_str = last_month_str.replace(month, months_dict[month])\r\n            break\r\n    sheet[f'B{end_row}'].value = last_month_str\r\n\r\n    last_sheet_name = sheet_name_before_prev\r\n    last_sheet = workbook[last_sheet_name]\r\n    last_row_in_last_sheet = last_sheet.max_row - 2  # Третья строка с конца\r\n    ref_cell = f\"'{last_sheet_name}'!D{last_row_in_last_sheet}\"\r\n\r\n    sheet[f'C{end_row}'].value = f\"={ref_cell}\"\r\n\r\n# Столбцы справа с гэсв\r\ndef shift_up_and_set_last_value(workbook, sheet_name_before_prev, target_sheet_name='LGD', column='AA', start_row=31, end_row=53):\r\n    target_sheet = workbook[target_sheet_name]\r\n    source_sheet = workbook[sheet_name_before_prev]\r\n\r\n    for row in range(start_row + 1, end_row + 1):\r\n        target_sheet[f'{column}{row - 1}'].value = target_sheet[f'{column}{row}'].value\r\n\r\n    last_row_in_source_sheet = source_sheet.max_row  # Последняя строка в исходном листе\r\n    ref_cell = f\"'{sheet_name_before_prev}'!C{last_row_in_source_sheet}\"\r\n    target_sheet[f'{column}{end_row}'].value = f\"={ref_cell}\"\r\n\r\n\r\ndef copy_values_in_columns(workbook, sheet_name='LGD', columns=['B', 'C'], source_start_row=4, source_end_row=26, target_start_rows=[31, 58]):\r\n    sheet = workbook[sheet_name]\r\n\r\n    for target_start_row in target_start_rows:\r\n        for i in range(source_end_row - source_start_row + 1):\r\n            source_row = source_start_row + i\r\n            target_row = target_start_row + i\r\n\r\n            for column in columns:\r\n                source_cell = sheet[f'{column}{source_row}']\r\n                target_cell = sheet[f'{column}{target_row}']\r\n                target_cell.value = source_cell.value\r\n\r\n\r\ndef find_formula_row(sheet):\r\n    \"\"\" Находит строку, в которую нужно вставить формулу \"\"\"\r\n    for row in range(sheet.max_row, 0, -1):\r\n        cell_value = sheet.cell(row=row, column=1).value\r\n        if cell_value is not None:\r\n            return row + 3\r\n    return 3\r\n\r\ndef update_sheets(workbook, balance_values, sheet_name_before_prev):\r\n    \"\"\" Обновляет листы в рабочей книге, добавляя новую колонку с балансом и формулы суммы и разности \"\"\"\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != 'LGD' and sheet_name != sheet_name_before_prev:\r\n            sheet = workbook[sheet_name]\r\n            writeoff_column_index = None\r\n            header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n            if \"Списание\" in header_row:\r\n                writeoff_column_index = header_row.index(\"Списание\") + 1\r\n\r\n            # Определение местоположения новой колонки\r\n            new_column_index = writeoff_column_index or sheet.max_column + 1\r\n\r\n            # Добавляем название новой колонки и данные\r\n            if writeoff_column_index:\r\n                sheet.insert_cols(writeoff_column_index)\r\n\r\n            sheet.cell(row=1, column=new_column_index).value = sheet_name_before_prev\r\n            for row in range(2, sheet.max_row + 1):\r\n                contract_cell = sheet.cell(row=row, column=2)\r\n                contract = contract_cell.value\r\n                balance = balance_values.get(contract)\r\n\r\n                # Копируем значение из предыдущего столбца, если есть столбец \"Списание\"\r\n                if writeoff_column_index:\r\n                    prev_column_value = sheet.cell(row=row, column=new_column_index - 1).value\r\n                    sheet.cell(row=row, column=new_column_index).value = prev_column_value\r\n                else:\r\n                    sheet.cell(row=row, column=new_column_index).value = balance\r\n\r\n            # Добавляем формулу суммы\r\n            formula_row = find_formula_row(sheet)\r\n            column_letter = get_column_letter(new_column_index)\r\n            sum_formula = f\"=SUM({column_letter}2:{column_letter}{formula_row - 1})\"\r\n            sheet.cell(row=formula_row, column=new_column_index).value = sum_formula\r\n\r\n            # Добавляем формулу разности\r\n            prev_column_letter = get_column_letter(new_column_index - 1)\r\n            diff_formula = f\"=IF({prev_column_letter}{formula_row}>{column_letter}{formula_row},{prev_column_letter}{formula_row}-{column_letter}{formula_row},\\\"-\\\")\"\r\n            sheet.cell(row=formula_row + 1, column=new_column_index).value = diff_formula\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef delete_sheet_after_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Удаляет лист, следующий за листом 'LGD' \"\"\"\r\n    lgd_index = None\r\n    for i, sheet_name in enumerate(workbook.sheetnames):\r\n        if sheet_name == lgd_sheet_name:\r\n            lgd_index = i\r\n            break\r\n\r\n    if lgd_index is not None and lgd_index < len(workbook.sheetnames) - 1:\r\n        next_sheet_name = workbook.sheetnames[lgd_index + 1]\r\n        del workbook[next_sheet_name]\r\n    else:\r\n        pass\r\n\r\ndef read_recovery_flows(sheet):\r\n    \"\"\" Читает формулы или значения из строки 'Recovery flows' в листе \"\"\"\r\n    recovery_flows = []\r\n    for row in range(sheet.max_row - 1, sheet.max_row + 1):  # Поиск в предпоследней строке\r\n        if sheet.cell(row=row, column=2).value == \"Recovery flows\":\r\n            for col in range(5, sheet.max_column + 1):  # Считывание начиная с колонки E\r\n                cell = sheet.cell(row=row, column=col)\r\n                value_or_formula = cell.value\r\n                if isinstance(value_or_formula, str) and value_or_formula.startswith('='):\r\n                    recovery_flows.append(value_or_formula)  \r\n                else:\r\n                    recovery_flows.append(value_or_formula) \r\n            break\r\n    return recovery_flows\r\n\r\ndef insert_recovery_flows_in_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Вставляет формулы для значений 'Recovery flows' из других листов в лист LGD \"\"\"\r\n    lgd_sheet = workbook[lgd_sheet_name]\r\n    current_row = 4  # Начало вставки в 4 строку\r\n    max_column_source = 27  # Столбец AA \r\n\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != lgd_sheet_name:\r\n            sheet = workbook[sheet_name]\r\n            recovery_flows_row = sheet.max_row - 1  # Предпоследняя строка\r\n            col_start_source = 5  # Столбец E в исходных листах\r\n            col_start_target = 4  # Столбец D в листе LGD\r\n\r\n            for col_source in range(col_start_source, max_column_source + 1):  # Столбцы в исходном листе\r\n                col_target = col_start_target + (col_source - col_start_source)  # Соответствующий столбец в листе LGD\r\n                col_letter = openpyxl.utils.get_column_letter(col_source)\r\n                ref_cell = f\"'{sheet_name}'!{col_letter}{recovery_flows_row}\"\r\n                lgd_sheet.cell(row=current_row, column=col_target).value = f\"={ref_cell}\"\r\n\r\n            current_row += 1  # Переход к следующей строке в LGD\r\n            max_column_source -= 1  # Уменьшаем максимальный столбец для следующего листа\r\n\r\n\r\n# Загрузка данных о займах\r\nloans_workbook = load_workbook(f\"C:\\\\Users\\\\А-Бизнес\\\\Desktop\\\\Arnur_Credit\\\\31.12.2023\\\\Открытые займы 31.12.2023.xlsx\")\r\nloans_sheet = loans_workbook.active\r\nbalance_values = read_balance_values(loans_sheet)\r\n\r\n\r\npath_to_agro_excel = f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/LGD/Предпринимательский.xlsx\"\r\n\r\nagro_workbook = load_workbook(path_to_agro_excel)\r\n\r\ndelete_sheet_after_LGD(agro_workbook)\r\n\r\nupdate_sheets(agro_workbook, balance_values, sheet_name_before_prev)\r\n\r\ninsert_recovery_flows_in_LGD(agro_workbook)\r\n\r\nshift_up_and_set_last_row(agro_workbook)\r\n\r\ncopy_values_in_columns(agro_workbook)\r\n\r\nshift_up_and_set_last_value(agro_workbook, sheet_name_before_prev)\r\n\r\nsave_workbook(agro_workbook, path_to_agro_excel)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"ПОМЕНЯТЬ ПУТЬ\nЗаполняем все \nтаблицы \n"},"TlfPW2a18z":{"id":"TlfPW2a18z","x":1320,"y":600,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"yK49h9fy2y","portName":"actionPort"}]},"outputs":{"actionPort":[]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\ndef filter_and_append_sheet(source_file, destination_file, segment, sheet_name):\r\n    df = pd.read_excel(source_file)\r\n    filtered_df = df[(df['Сегмент'] == segment) & (df['Количество дней просрочки фактическое'] > 90)]\r\n    column_data = filtered_df[['Без Р']]\r\n\r\n    with pd.ExcelWriter(destination_file, engine='openpyxl', mode='a') as writer:\r\n        column_data.to_excel(writer, sheet_name=sheet_name, index=False)\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n# Позапрошлый месяц\r\nlast_day_before_prev_month = {{last_day_of_before_prev_month}}\r\n\r\nsource_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_before_prev_month}\\\\LGD\"\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\nsource_excel_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\Открытые займы {last_day_previous_month}.xlsx\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Потребительский.xlsx\"\r\n\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime(last_day_before_prev_month, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nfilter_and_append_sheet(source_excel_path, destination_excel_path_agro, \"Потребительский\", sheet_name)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Вставляем контракты в lgd с выгрузки\n"},"yK49h9fy2y":{"id":"yK49h9fy2y","x":1620,"y":600,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"DXABYsb3g9","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"TlfPW2a18z","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Потребительский.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef insert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path):\r\n    try:\r\n        # Чтение данных из файла \"Потребительский.xlsx\", лист \"202311\"\r\n        df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n\r\n        # Чтение данных из файла \"Уникальные.xlsx\", лист \"агро\" без заголовков\r\n        df_uniques = pd.read_excel(unique_sheet_path, sheet_name='потреб', header=None)\r\n        df_uniques.columns = ['Уникальные']  # Назначение названия столбца\r\n        df_uniques.dropna(inplace=True)  # Удаление пустых строк\r\n\r\n        if len(df_agro) < len(df_uniques):\r\n            extra_rows = len(df_uniques) - len(df_agro)\r\n            temp_df = pd.DataFrame(index=range(extra_rows), columns=df_agro.columns)\r\n            df_agro = pd.concat([df_agro, temp_df], ignore_index=True)\r\n\r\n        df_agro['Уникальные'] = pd.Series(df_uniques['Уникальные'].values)\r\n\r\n        # Сохранение обновленных данных в файл \"Агро.xlsx\", лист \"202311\"\r\n        with pd.ExcelWriter(destination_excel_path_agro, engine='openpyxl') as writer:\r\n            writer.book = load_workbook(destination_excel_path_agro)\r\n            writer.sheets = {ws.title: ws for ws in writer.book.worksheets}\r\n            df_agro.to_excel(writer, sheet_name=sheet_name, index=False)\r\n\r\n    except Exception as e:\r\n        print(f\"Произошла ошибка при обработке данных: {e}\")\r\n\r\ninsert_contacts_from_unique(destination_excel_path_agro, unique_sheet_path)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем контракты из файла Уникальные"},"DXABYsb3g9":{"id":"DXABYsb3g9","x":1920,"y":600,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"wTnZbzcDBj","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"yK49h9fy2y","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nfrom openpyxl import load_workbook \r\n\r\n\r\nlast_day_previous_month = {{last_day_of_prev_month}}\r\n\r\ndestination_folder_path = f\"{{{data_folder_path}}}\\\\{last_day_previous_month}\\\\LGD\"\r\n\r\ndestination_excel_path_agro = f\"{destination_folder_path}\\\\Потребительский.xlsx\"\r\nunique_sheet_path = f\"{destination_folder_path}\\\\Уникальные.xlsx\"\r\n\r\nsheet_name = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\ndef get_unique_contacts_list() -> list:\r\n    df_agro = pd.read_excel(destination_excel_path_agro, sheet_name=sheet_name)\r\n    \r\n    unique_contacts_list = []\r\n    with_out_r_list = df_agro['Без Р'].dropna().astype(str).tolist()  \r\n    contacts_list = df_agro[\"Уникальные\"].dropna().astype(str).tolist()\r\n\r\n    with_out_r_list.sort()\r\n    contacts_list.sort()\r\n\r\n    for i, value in enumerate(with_out_r_list):\r\n        try:\r\n            if value not in contacts_list:\r\n                unique_contacts_list.append(value)\r\n        except IndexError:\r\n            pass\r\n   \r\n    return unique_contacts_list\r\n\r\nunique_contacts_list = get_unique_contacts_list()\r\n{{unique_contacts_list}} = unique_contacts_list"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Получаем массив уникальных контрактов"},"wTnZbzcDBj":{"id":"wTnZbzcDBj","x":2220,"y":600,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"V1pV_A9-Ya","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"DXABYsb3g9","portName":"nextAction"}]}},"inputData":{"script":{"text":"from datetime import datetime\r\nimport openpyxl\r\nfrom openpyxl.styles import PatternFill\r\n\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef get_active_sheet(workbook):\r\n    \"\"\" Возвращает активный лист из рабочей книги \"\"\"\r\n    return workbook.active\r\n\r\ndef read_gesv_and_balance_values(sheet, contracts):\r\n    \"\"\" Читает значения ГЭСВ и баланса для контрактов позапрошлого месяца \"\"\"\r\n    gesv_values = {}\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    gesv_index = header_row.index(\"Ставка ГЭСВ\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            gesv = row[gesv_index - 1]\r\n            balance = row[balance_index - 1]\r\n            gesv_values[contract] = gesv\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef read_balance_values_from_prev(sheet, contracts):\r\n    \"\"\" Читает значения баланса для контрактов с прош месяца\"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, gesv_values=True))\r\n    contracts_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n    \r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contracts_index - 1]\r\n        if contract in contracts:\r\n            balance = row[balance_index - 1]\r\n            balance_values[contract] = balance\r\n\r\n    return gesv_values, balance_values\r\n\r\ndef create_and_format_sheet(workbook, sheet_name):\r\n    \"\"\" Создает и форматирует новый лист \"\"\"\r\n    if sheet_name in workbook.sheetnames:\r\n        sheet = workbook[sheet_name]\r\n        sheet.delete_rows(2, sheet.max_row)\r\n        sheet.delete_cols(2, sheet.max_column)\r\n    else:\r\n        sheet = workbook.create_sheet(sheet_name)\r\n    sheet['A1'] = '№'\r\n    sheet['B1'] = 'Contracts'\r\n    sheet['C1'] = 'Rate'\r\n    sheet['D1'] = sheet_name_before_prev\r\n    sheet['E1'] = sheet_name_prev\r\n    return sheet\r\n\r\ndef add_data_to_sheet(sheet, contracts, gesv_values, balance_values_before_prev, balance_values_prev):\r\n    \"\"\" Добавляет данные контрактов, ГЭСВ и баланса за два месяца в лист \"\"\"\r\n    row_number = 1\r\n    for contract in contracts:\r\n        gesv = gesv_values.get(contract, None)\r\n        balance_before_prev = balance_values_before_prev.get(contract, None)\r\n        balance_prev = balance_values_prev.get(contract, None)\r\n        row_number += 1\r\n        sheet.append([row_number - 1, contract, gesv, balance_before_prev, balance_prev])\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef add_summary_to_sheet(sheet, start_row, end_row):\r\n    \"\"\" Добавляет итоговые строки с формулами для общих сумм, разницы и среднего значения ГЭСВ \"\"\"\r\n    # Вставляем пустые строки\r\n    sheet.insert_rows(end_row + 1)\r\n    sheet.insert_rows(end_row + 2)\r\n    \r\n    # Добавляем формулы для общих сумм, сдвигая на одну ячейку вправо\r\n    total_prev_cell = sheet.cell(row=end_row + 3, column=4)\r\n    total_prev_cell.value = f\"=SUM(D{start_row}:D{end_row})\"\r\n    total_curr_cell = sheet.cell(row=end_row + 3, column=5)\r\n    total_curr_cell.value = f\"=SUM(E{start_row}:E{end_row})\"\r\n    \r\n    # Задаем красный цвет заливки для ячейки с формулой суммирования предыдущего месяца\r\n    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')\r\n    total_prev_cell.fill = red_fill\r\n    \r\n    # Добавляем формулу для разницы между суммами\r\n    sheet.cell(row=end_row + 4, column=2).value = \"Recovery flows\"\r\n    sheet.cell(row=end_row + 4, column=5).value = f\"=IF(E{end_row + 3}>D{end_row + 3},E{end_row + 3}-D{end_row + 3},\\\"-\\\")\"\r\n    \r\n    # Добавляем формулу для среднего ГЭСВ\r\n    sheet.cell(row=end_row + 5, column=2).value = \"Rate\"\r\n    sheet.cell(row=end_row + 5, column=3).value = f\"=SUMPRODUCT(D{start_row}:D{end_row},C{start_row}:C{end_row})/D{end_row + 3}\"\r\n\r\n\r\n\r\nwb_open_loans_before_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_before_prev_month}}}/Открытые займы {{{last_day_of_before_prev_month}}}.xlsx\")\r\nwb_open_loans_prev_month = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/Открытые займы {{{last_day_of_prev_month}}}.xlsx\")\r\nsheet_open_loans_before_prev_month = get_active_sheet(wb_open_loans_before_prev_month)\r\nsheet_open_loans_prev_month = get_active_sheet(wb_open_loans_prev_month)\r\n\r\ngesv_values, balance_values_before_prev = read_gesv_and_balance_values(sheet_open_loans_before_prev_month, {{unique_contacts_list}})\r\n_, balance_values_prev = read_gesv_and_balance_values(sheet_open_loans_prev_month, {{unique_contacts_list}})\r\n\r\nwb_agro = load_workbook(f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Потребительский.xlsx\")\r\nsheet_agro = create_and_format_sheet(wb_agro, sheet_name_before_prev)\r\nadd_data_to_sheet(sheet_agro, {{unique_contacts_list}}, gesv_values, balance_values_before_prev, balance_values_prev)\r\n\r\nstart_row = 2  # Стартовая строка для данных\r\nend_row = sheet_agro.max_row  # Последняя строка с данными\r\nadd_summary_to_sheet(sheet_agro, start_row, end_row)\r\n\r\nsave_workbook(wb_agro, f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}//LGD/Потребительский.xlsx\")\r\n"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Записываем в ексель уникальные контракты и их гэсв"},"V1pV_A9-Ya":{"id":"V1pV_A9-Ya","x":2520,"y":600,"type":"invoce_code_script","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"wTnZbzcDBj","portName":"nextAction"}]}},"inputData":{"script":{"text":"import openpyxl\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime, timedelta\r\n\r\nsheet_name_prev = datetime.strptime({{last_day_of_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\nsheet_name_before_prev = datetime.strptime({{last_day_of_before_prev_month}}, '%d.%m.%Y').strftime('%Y%m')\r\n\r\nmonths_dict = {\r\n    \"January\": \"Январь\", \"February\": \"Февраль\", \"March\": \"Март\",\r\n    \"April\": \"Апрель\", \"May\": \"Май\", \"June\": \"Июнь\",\r\n    \"July\": \"Июль\", \"August\": \"Август\", \"September\": \"Сентябрь\",\r\n    \"October\": \"Октябрь\", \"November\": \"Ноябрь\", \"December\": \"Декабрь\"\r\n}\r\n\r\ndef load_workbook(filepath):\r\n    \"\"\" Загружает Excel-файл \"\"\"\r\n    return openpyxl.load_workbook(filepath)\r\n\r\ndef read_balance_values(sheet):\r\n    \"\"\" Читает значения баланса из листа \"\"\"\r\n    balance_values = {}\r\n    header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n    contract_index = header_row.index(\"Контракт\") + 1\r\n    balance_index = header_row.index(\"Баланс\") + 1\r\n\r\n    for row in sheet.iter_rows(min_row=2, values_only=True):\r\n        contract = row[contract_index - 1]\r\n        balance = row[balance_index - 1]\r\n        balance_values[contract] = balance\r\n\r\n    return balance_values\r\n\r\n# столбцы с месяцами в LGD\r\ndef shift_up_and_set_last_row(workbook, sheet_name='LGD', columns=['B', 'C'], start_row=4, end_row=26):\r\n    sheet = workbook[sheet_name]\r\n\r\n    # Поднятие значений столбцов на одну строку вверх\r\n    for column in columns:\r\n        for row in range(start_row + 1, end_row + 1):\r\n            sheet[f'{column}{row - 1}'].value = sheet[f'{column}{row}'].value\r\n\r\n    # Настройка даты для последней строки в столбце B\r\n    first_day_of_current_month = datetime.now().replace(day=1)\r\n    last_month_date = first_day_of_current_month - timedelta(days=1)\r\n    last_month_str = last_month_date.strftime(\"%B %Y\").capitalize()\r\n    for month in months_dict:\r\n        if last_month_str.startswith(month):\r\n            last_month_str = last_month_str.replace(month, months_dict[month])\r\n            break\r\n    sheet[f'B{end_row}'].value = last_month_str\r\n\r\n    last_sheet_name = sheet_name_before_prev\r\n    last_sheet = workbook[last_sheet_name]\r\n    last_row_in_last_sheet = last_sheet.max_row - 2  # Третья строка с конца\r\n    ref_cell = f\"'{last_sheet_name}'!D{last_row_in_last_sheet}\"\r\n\r\n    sheet[f'C{end_row}'].value = f\"={ref_cell}\"\r\n\r\n# Столбцы справа с гэсв\r\ndef shift_up_and_set_last_value(workbook, sheet_name_before_prev, target_sheet_name='LGD', column='AA', start_row=31, end_row=53):\r\n    target_sheet = workbook[target_sheet_name]\r\n    source_sheet = workbook[sheet_name_before_prev]\r\n\r\n    for row in range(start_row + 1, end_row + 1):\r\n        target_sheet[f'{column}{row - 1}'].value = target_sheet[f'{column}{row}'].value\r\n\r\n    last_row_in_source_sheet = source_sheet.max_row  # Последняя строка в исходном листе\r\n    ref_cell = f\"'{sheet_name_before_prev}'!C{last_row_in_source_sheet}\"\r\n    target_sheet[f'{column}{end_row}'].value = f\"={ref_cell}\"\r\n\r\n\r\ndef copy_values_in_columns(workbook, sheet_name='LGD', columns=['B', 'C'], source_start_row=4, source_end_row=26, target_start_rows=[31, 58]):\r\n    sheet = workbook[sheet_name]\r\n\r\n    for target_start_row in target_start_rows:\r\n        for i in range(source_end_row - source_start_row + 1):\r\n            source_row = source_start_row + i\r\n            target_row = target_start_row + i\r\n\r\n            for column in columns:\r\n                source_cell = sheet[f'{column}{source_row}']\r\n                target_cell = sheet[f'{column}{target_row}']\r\n                target_cell.value = source_cell.value\r\n\r\n\r\ndef find_formula_row(sheet):\r\n    \"\"\" Находит строку, в которую нужно вставить формулу \"\"\"\r\n    for row in range(sheet.max_row, 0, -1):\r\n        cell_value = sheet.cell(row=row, column=1).value\r\n        if cell_value is not None:\r\n            return row + 3\r\n    return 3\r\n\r\ndef update_sheets(workbook, balance_values, sheet_name_before_prev):\r\n    \"\"\" Обновляет листы в рабочей книге, добавляя новую колонку с балансом и формулы суммы и разности \"\"\"\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != 'LGD' and sheet_name != sheet_name_before_prev:\r\n            sheet = workbook[sheet_name]\r\n            writeoff_column_index = None\r\n            header_row = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))\r\n            if \"Списание\" in header_row:\r\n                writeoff_column_index = header_row.index(\"Списание\") + 1\r\n\r\n            # Определение местоположения новой колонки\r\n            new_column_index = writeoff_column_index or sheet.max_column + 1\r\n\r\n            # Добавляем название новой колонки и данные\r\n            if writeoff_column_index:\r\n                sheet.insert_cols(writeoff_column_index)\r\n\r\n            sheet.cell(row=1, column=new_column_index).value = sheet_name_before_prev\r\n            for row in range(2, sheet.max_row + 1):\r\n                contract_cell = sheet.cell(row=row, column=2)\r\n                contract = contract_cell.value\r\n                balance = balance_values.get(contract)\r\n\r\n                # Копируем значение из предыдущего столбца, если есть столбец \"Списание\"\r\n                if writeoff_column_index:\r\n                    prev_column_value = sheet.cell(row=row, column=new_column_index - 1).value\r\n                    sheet.cell(row=row, column=new_column_index).value = prev_column_value\r\n                else:\r\n                    sheet.cell(row=row, column=new_column_index).value = balance\r\n\r\n            # Добавляем формулу суммы\r\n            formula_row = find_formula_row(sheet)\r\n            column_letter = get_column_letter(new_column_index)\r\n            sum_formula = f\"=SUM({column_letter}2:{column_letter}{formula_row - 1})\"\r\n            sheet.cell(row=formula_row, column=new_column_index).value = sum_formula\r\n\r\n            # Добавляем формулу разности\r\n            prev_column_letter = get_column_letter(new_column_index - 1)\r\n            diff_formula = f\"=IF({prev_column_letter}{formula_row}>{column_letter}{formula_row},{prev_column_letter}{formula_row}-{column_letter}{formula_row},\\\"-\\\")\"\r\n            sheet.cell(row=formula_row + 1, column=new_column_index).value = diff_formula\r\n\r\ndef save_workbook(workbook, filepath):\r\n    \"\"\" Сохраняет изменения в рабочей книге \"\"\"\r\n    workbook.save(filepath)\r\n\r\ndef delete_sheet_after_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Удаляет лист, следующий за листом 'LGD' \"\"\"\r\n    lgd_index = None\r\n    for i, sheet_name in enumerate(workbook.sheetnames):\r\n        if sheet_name == lgd_sheet_name:\r\n            lgd_index = i\r\n            break\r\n\r\n    if lgd_index is not None and lgd_index < len(workbook.sheetnames) - 1:\r\n        next_sheet_name = workbook.sheetnames[lgd_index + 1]\r\n        del workbook[next_sheet_name]\r\n    else:\r\n        pass\r\n\r\ndef read_recovery_flows(sheet):\r\n    \"\"\" Читает формулы или значения из строки 'Recovery flows' в листе \"\"\"\r\n    recovery_flows = []\r\n    for row in range(sheet.max_row - 1, sheet.max_row + 1):  # Поиск в предпоследней строке\r\n        if sheet.cell(row=row, column=2).value == \"Recovery flows\":\r\n            for col in range(5, sheet.max_column + 1):  # Считывание начиная с колонки E\r\n                cell = sheet.cell(row=row, column=col)\r\n                value_or_formula = cell.value\r\n                if isinstance(value_or_formula, str) and value_or_formula.startswith('='):\r\n                    recovery_flows.append(value_or_formula)  \r\n                else:\r\n                    recovery_flows.append(value_or_formula) \r\n            break\r\n    return recovery_flows\r\n\r\ndef insert_recovery_flows_in_LGD(workbook, lgd_sheet_name='LGD'):\r\n    \"\"\" Вставляет формулы для значений 'Recovery flows' из других листов в лист LGD \"\"\"\r\n    lgd_sheet = workbook[lgd_sheet_name]\r\n    current_row = 4  # Начало вставки в 4 строку\r\n    max_column_source = 27  # Столбец AA \r\n\r\n    for sheet_name in workbook.sheetnames:\r\n        if sheet_name != lgd_sheet_name:\r\n            sheet = workbook[sheet_name]\r\n            recovery_flows_row = sheet.max_row - 1  # Предпоследняя строка\r\n            col_start_source = 5  # Столбец E в исходных листах\r\n            col_start_target = 4  # Столбец D в листе LGD\r\n\r\n            for col_source in range(col_start_source, max_column_source + 1):  # Столбцы в исходном листе\r\n                col_target = col_start_target + (col_source - col_start_source)  # Соответствующий столбец в листе LGD\r\n                col_letter = openpyxl.utils.get_column_letter(col_source)\r\n                ref_cell = f\"'{sheet_name}'!{col_letter}{recovery_flows_row}\"\r\n                lgd_sheet.cell(row=current_row, column=col_target).value = f\"={ref_cell}\"\r\n\r\n            current_row += 1  # Переход к следующей строке в LGD\r\n            max_column_source -= 1  # Уменьшаем максимальный столбец для следующего листа\r\n\r\n\r\n# Загрузка данных о займах\r\nloans_workbook = load_workbook(f\"C:\\\\Users\\\\А-Бизнес\\\\Desktop\\\\Arnur_Credit\\\\31.12.2023\\\\Открытые займы 31.12.2023.xlsx\")\r\nloans_sheet = loans_workbook.active\r\nbalance_values = read_balance_values(loans_sheet)\r\n\r\n\r\npath_to_agro_excel = f\"{{{data_folder_path}}}/{{{last_day_of_prev_month}}}/LGD/Потребительский.xlsx\"\r\n\r\nagro_workbook = load_workbook(path_to_agro_excel)\r\n\r\ndelete_sheet_after_LGD(agro_workbook)\r\n\r\nupdate_sheets(agro_workbook, balance_values, sheet_name_before_prev)\r\n\r\ninsert_recovery_flows_in_LGD(agro_workbook)\r\n\r\nshift_up_and_set_last_row(agro_workbook)\r\n\r\ncopy_values_in_columns(agro_workbook)\r\n\r\nshift_up_and_set_last_value(agro_workbook, sheet_name_before_prev)\r\n\r\nsave_workbook(agro_workbook, path_to_agro_excel)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"ПОМЕНЯТЬ ПУТЬ\nЗаполняем все \nтаблицы \n"}}